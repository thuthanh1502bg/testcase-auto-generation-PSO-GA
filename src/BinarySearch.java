/*
 * This code was generated by ojc.
 */
import GeneticAlgorithm.InstrumentCode.*;
import java.util.*;


public class BinarySearch
{

    public BinarySearch()
    {
        trace.add( new java.lang.Integer( 7 ) );
    }

    public int binarySearch( MyInt[] V, Point point, int k )
    {
        trace.add( new java.lang.Integer( 8 ) );
        int x = point.getX();
        int n = V.length;
        int low;
        int high;
        int mid;
        low = 0;
        high = n - 1;
        if (k > n) {
            trace.add( new java.lang.Integer( 9 ) );
            k = k++;
        } else {
            trace.add( new java.lang.Integer( 10 ) );
        }
        while (low <= high) {
            trace.add( new java.lang.Integer( 11 ) );
            mid = (low + high) / 2;
            if (x < V[mid].getNumber()) {
                trace.add( new java.lang.Integer( 12 ) );
                high = mid - 1;
            } else {
                trace.add( new java.lang.Integer( 13 ) );
                if (x > V[mid].getNumber()) {
                    trace.add( new java.lang.Integer( 14 ) );
                    low = mid + 1;
                } else {
                    trace.add( new java.lang.Integer( 15 ) );
                    return mid;
                }
            }
        }
        return -1;
    }

    
    static java.util.Set trace = new java.util.HashSet();

    
    public static void newTrace()
    {
        trace = new java.util.HashSet();
    }

    
    public static java.util.Set getTrace()
    {
        return trace;
    }

}
