/*
 * This code was generated by ojc.
 */
import GeneticAlgorithm.InstrumentCode.*;
import java.util.*;


public class Triangle
{

    int side1;

    int side2;

    int side3;

    public Triangle()
    {
        trace.add( new java.lang.Integer( 1 ) );
    }

    public Triangle( int side1, int side2, int side3 )
    {
        super();
        trace.add( new java.lang.Integer( 2 ) );
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    public Triangle( int side1, int side2 )
    {
        super();
        trace.add( new java.lang.Integer( 3 ) );
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side2;
    }

    public Triangle( int side1 )
    {
        super();
        trace.add( new java.lang.Integer( 4 ) );
        this.side1 = side1;
        this.side2 = side1;
        this.side3 = side1;
    }

    public Triangle( Triangle t )
    {
        super();
        trace.add( new java.lang.Integer( 5 ) );
        this.side1 = t.side1;
        this.side2 = t.side2;
        this.side3 = t.side3;
    }

    public java.lang.String checkTriangle()
    {
        trace.add( new java.lang.Integer( 6 ) );
        java.lang.String type = "";
        if (side1 + side2 > side3 && side3 + side2 > side1 && side1 + side3 > side2) {
            trace.add( new java.lang.Integer( 7 ) );
            if (side1 != side2 && side1 != side3 && side2 != side3) {
                trace.add( new java.lang.Integer( 8 ) );
                type = "Is triangle scalene";
            } else {
                trace.add( new java.lang.Integer( 9 ) );
                if (side1 == side2 && side1 != side3 || side1 == side3 && side1 != side2 || side2 == side3 && side2 != side1) {
                    trace.add( new java.lang.Integer( 10 ) );
                    type = "Is triangle isosceles ";
                } else {
                    trace.add( new java.lang.Integer( 11 ) );
                    type = "Is triangle equilateral ";
                }
            }
        } else {
            trace.add( new java.lang.Integer( 12 ) );
            type = "Not a triangle";
        }
        return type;
    }

    
    static java.util.Set trace = new java.util.HashSet();

    
    public static void newTrace()
    {
        trace = new java.util.HashSet();
    }

    
    public static java.util.Set getTrace()
    {
        return trace;
    }

}
